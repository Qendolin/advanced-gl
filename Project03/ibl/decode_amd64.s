//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

DATA LCDATA1<>+0x000(SB)/8, $0x000000003f800000
GLOBL LCDATA1<>(SB), 8, $8

TEXT Â·_DecodeRgbe(SB), $0-40

    MOVQ components+0(FP), DI
    MOVQ len+8(FP), SI
    MOVQ data+16(FP), DX
    MOVQ buf+24(FP), CX
    LEAQ LCDATA1<>(SB), BP

    LONG $0xfd5f8d48             // lea    rbx, [rdi - 3]
    WORD $0xc031                 // xor    eax, eax
    LONG $0x01fb8348             // cmp    rbx, 1
	JA LBB0_13
    WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JE LBB0_13
    LONG $0x04ff8348             // cmp    rdi, 4
	JNE LBB0_3
    WORD $0x3145; BYTE $0xc9     // xor    r9d, r9d
    LONG $0x4510fac5; BYTE $0x00 // vmovss    xmm0, dword 0[rbp] /* [rip + .LCPI0_0] */
    WORD $0xc031                 // xor    eax, eax
    WORD $0x3145; BYTE $0xc0     // xor    r8d, r8d
	JMP LBB0_7
LBB0_9:
    WORD $0x8944; BYTE $0xc3     // mov    ebx, r8d
    LONG $0x009904c7; WORD $0x0000; BYTE $0x00 // mov    dword [rcx + 4*rbx], 0
    LONG $0x01588d41             // lea    ebx, [r8 + 1]
    LONG $0x009904c7; WORD $0x0000; BYTE $0x00 // mov    dword [rcx + 4*rbx], 0
    LONG $0xc957f0c5             // vxorps    xmm1, xmm1, xmm1
    LONG $0xd257e8c5             // vxorps    xmm2, xmm2, xmm2
LBB0_10:
    LONG $0x02588d41             // lea    ebx, [r8 + 2]
    LONG $0x0c11fac5; BYTE $0x99 // vmovss    dword [rcx + 4*rbx], xmm1
    LONG $0x03588d41             // lea    ebx, [r8 + 3]
    LONG $0x1411fac5; BYTE $0x99 // vmovss    dword [rcx + 4*rbx], xmm2
    LONG $0x04c08348             // add    rax, 4
    WORD $0x0141; BYTE $0xf8     // add    r8d, edi
    WORD $0x8941; BYTE $0xc1     // mov    r9d, eax
    WORD $0x3949; BYTE $0xf1     // cmp    r9, rsi
	JAE LBB0_13
LBB0_7:
    WORD $0x588d; BYTE $0x03     // lea    ebx, [rax + 3]
    LONG $0x14b60f44; BYTE $0x1a // movzx    r10d, byte [rdx + rbx]
    WORD $0x8545; BYTE $0xd2     // test    r10d, r10d
	JE LBB0_9
    WORD $0x588d; BYTE $0x02     // lea    ebx, [rax + 2]
    LONG $0x1cb60f44; BYTE $0x1a // movzx    r11d, byte [rdx + rbx]
    WORD $0x588d; BYTE $0x01     // lea    ebx, [rax + 1]
    LONG $0x34b60f44; BYTE $0x1a // movzx    r14d, byte [rdx + rbx]
    LONG $0x1cb60f42; BYTE $0x0a // movzx    ebx, byte [rdx + r9]
    LONG $0x17e2c141             // shl    r10d, 23
    LONG $0x00c28141; WORD $0x8000; BYTE $0x7b // add    r10d, 2071986176
    LONG $0x00e28141; WORD $0x8000; BYTE $0x7f // and    r10d, 2139095040
    LONG $0x6e79c1c4; BYTE $0xca // vmovd    xmm1, r10d
    LONG $0xd32adac5             // vcvtsi2ss    xmm2, xmm4, ebx
    LONG $0xd159eac5             // vmulss    xmm2, xmm2, xmm1
    WORD $0x8944; BYTE $0xc3     // mov    ebx, r8d
    LONG $0x2a5ac1c4; BYTE $0xde // vcvtsi2ss    xmm3, xmm4, r14d
    LONG $0x1411fac5; BYTE $0x99 // vmovss    dword [rcx + 4*rbx], xmm2
    LONG $0xd159e2c5             // vmulss    xmm2, xmm3, xmm1
    LONG $0x01588d41             // lea    ebx, [r8 + 1]
    LONG $0x1411fac5; BYTE $0x99 // vmovss    dword [rcx + 4*rbx], xmm2
    LONG $0x2a5ac1c4; BYTE $0xd3 // vcvtsi2ss    xmm2, xmm4, r11d
    LONG $0xc959eac5             // vmulss    xmm1, xmm2, xmm1
    LONG $0xd028f8c5             // vmovaps    xmm2, xmm0
	JMP LBB0_10
LBB0_3:
    LONG $0x0004b841; WORD $0x0000 // mov    r8d, 4
    LONG $0x0002b941; WORD $0x0000 // mov    r9d, 2
    WORD $0x3145; BYTE $0xd2     // xor    r10d, r10d
    WORD $0xc031                 // xor    eax, eax
	JMP LBB0_4
LBB0_11:
    LONG $0xfe588d41             // lea    ebx, [r8 - 2]
    LONG $0x3cb60f44; BYTE $0x1a // movzx    r15d, byte [rdx + rbx]
    LONG $0xfd588d41             // lea    ebx, [r8 - 3]
    LONG $0x24b60f44; BYTE $0x1a // movzx    r12d, byte [rdx + rbx]
    LONG $0x1cb60f42; BYTE $0x12 // movzx    ebx, byte [rdx + r10]
    LONG $0x17e6c141             // shl    r14d, 23
    LONG $0x00c68141; WORD $0x8000; BYTE $0x7b // add    r14d, 2071986176
    LONG $0x00e68141; WORD $0x8000; BYTE $0x7f // and    r14d, 2139095040
    LONG $0x6e79c1c4; BYTE $0xc6 // vmovd    xmm0, r14d
    LONG $0xcb2ae2c5             // vcvtsi2ss    xmm1, xmm3, ebx
    LONG $0xc859f2c5             // vmulss    xmm1, xmm1, xmm0
    WORD $0x8944; BYTE $0xdb     // mov    ebx, r11d
    LONG $0x2a62c1c4; BYTE $0xd4 // vcvtsi2ss    xmm2, xmm3, r12d
    LONG $0x0c11fac5; BYTE $0x99 // vmovss    dword [rcx + 4*rbx], xmm1
    LONG $0xc859eac5             // vmulss    xmm1, xmm2, xmm0
    LONG $0xff598d41             // lea    ebx, [r9 - 1]
    LONG $0x0c11fac5; BYTE $0x99 // vmovss    dword [rcx + 4*rbx], xmm1
    LONG $0x2a62c1c4; BYTE $0xcf // vcvtsi2ss    xmm1, xmm3, r15d
    LONG $0xc059f2c5             // vmulss    xmm0, xmm1, xmm0
LBB0_12:
    WORD $0x8944; BYTE $0xcb     // mov    ebx, r9d
    LONG $0x0411fac5; BYTE $0x99 // vmovss    dword [rcx + 4*rbx], xmm0
    LONG $0x03c08348             // add    rax, 3
    WORD $0x8945; BYTE $0xc2     // mov    r10d, r8d
    LONG $0x04c08341             // add    r8d, 4
    WORD $0x0141; BYTE $0xf9     // add    r9d, edi
    WORD $0x3949; BYTE $0xf2     // cmp    r10, rsi
	JAE LBB0_13
LBB0_4:
    LONG $0xfe598d45             // lea    r11d, [r9 - 2]
    LONG $0xff588d41             // lea    ebx, [r8 - 1]
    LONG $0x34b60f44; BYTE $0x1a // movzx    r14d, byte [rdx + rbx]
    WORD $0x8545; BYTE $0xf6     // test    r14d, r14d
	JNE LBB0_11
    WORD $0x8944; BYTE $0xdb     // mov    ebx, r11d
    LONG $0x009904c7; WORD $0x0000; BYTE $0x00 // mov    dword [rcx + 4*rbx], 0
    LONG $0xff598d41             // lea    ebx, [r9 - 1]
    LONG $0x009904c7; WORD $0x0000; BYTE $0x00 // mov    dword [rcx + 4*rbx], 0
    LONG $0xc057f8c5             // vxorps    xmm0, xmm0, xmm0
	JMP LBB0_12
LBB0_13:
    MOVQ AX, n+32(FP)
    RET
