//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

DATA LCDATA1<>+0x000(SB)/8, $0x3949f623d5a8a733
DATA LCDATA1<>+0x008(SB)/8, $0x4070000000000000
GLOBL LCDATA1<>(SB), 8, $16

TEXT Â·_EncodeRgbe(SB), $0-40

    MOVQ components+0(FP), DI
    MOVQ len+8(FP), SI
    MOVQ data+16(FP), DX
    MOVQ buf+24(FP), CX
    LEAQ LCDATA1<>(SB), BP

    LONG $0xfd478d48             // lea    rax, [rdi - 3]
    LONG $0x01f88348             // cmp    rax, 1
	JBE LBB0_2
    WORD $0x3145; BYTE $0xdb     // xor    r11d, r11d
LBB0_9:
    WORD $0x894c; BYTE $0xd8     // mov    rax, r11
    MOVQ AX, n+32(FP)
    RET
LBB0_2:
    WORD $0x8949; BYTE $0xd0     // mov    r8, rdx
    WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
    WORD $0xd231                 // xor    edx, edx
    WORD $0xf748; BYTE $0xf7     // div    rdi
    WORD $0x3948; BYTE $0xf7     // cmp    rdi, rsi
	JBE LBB0_4
    WORD $0x3145; BYTE $0xdb     // xor    r11d, r11d
    WORD $0x894c; BYTE $0xd8     // mov    rax, r11
    WORD $0x8948; BYTE $0xec     // mov    rsp, rbp
    BYTE $0x5d                   // pop    rbp
    BYTE $0xc3                   // ret
LBB0_4:
    LONG $0x0001b941; WORD $0x0000 // mov    r9d, 1
    WORD $0xf631                 // xor    esi, esi
    LONG $0x4510fbc5; BYTE $0x00 // vmovsd    xmm0, qword 0[rbp] /* [rip + .LCPI0_0] */
    LONG $0x4d10fbc5; BYTE $0x08 // vmovsd    xmm1, qword 8[rbp] /* [rip + .LCPI0_1] */
    WORD $0x3145; BYTE $0xdb     // xor    r11d, r11d
	JMP LBB0_5
LBB0_7:
    LONG $0xf27ef9c5             // vmovd    edx, xmm6
    WORD $0x8941; BYTE $0xd2     // mov    r10d, edx
    LONG $0xffffe281; WORD $0x807f // and    edx, -2139095041
    LONG $0x0000ca81; WORD $0x3f00 // or    edx, 1056964608
    LONG $0xf26ef9c5             // vmovd    xmm6, edx
    LONG $0xf65acac5             // vcvtss2sd    xmm6, xmm6, xmm6
    LONG $0xf159cbc5             // vmulsd    xmm6, xmm6, xmm1
    LONG $0xed5ecbc5             // vdivsd    xmm5, xmm6, xmm5
    LONG $0xed5ad3c5             // vcvtsd2ss    xmm5, xmm5, xmm5
    LONG $0xe559dac5             // vmulss    xmm4, xmm4, xmm5
    LONG $0xd42cfac5             // vcvttss2si    edx, xmm4
    WORD $0x8944; BYTE $0xde     // mov    esi, r11d
    WORD $0x1488; BYTE $0x31     // mov    byte [rcx + rsi], dl
    LONG $0xdd59e2c5             // vmulss    xmm3, xmm3, xmm5
    LONG $0xd32cfac5             // vcvttss2si    edx, xmm3
    LONG $0x01738d41             // lea    esi, [r11 + 1]
    WORD $0x1488; BYTE $0x31     // mov    byte [rcx + rsi], dl
    LONG $0xd559eac5             // vmulss    xmm2, xmm2, xmm5
    LONG $0xd22cfac5             // vcvttss2si    edx, xmm2
    LONG $0x17eac141             // shr    r10d, 23
    LONG $0x02738d41             // lea    esi, [r11 + 2]
    WORD $0x1488; BYTE $0x31     // mov    byte [rcx + rsi], dl
    LONG $0x02c28041             // add    r10b, 2
    WORD $0x8944; BYTE $0xde     // mov    esi, r11d
LBB0_8:
    WORD $0xf289                 // mov    edx, esi
    LONG $0x03ca8348             // or    rdx, 3
    LONG $0x11148844             // mov    byte [rcx + rdx], r10b
    LONG $0x04c38349             // add    r11, 4
    WORD $0x8944; BYTE $0xce     // mov    esi, r9d
    LONG $0x01c18341             // add    r9d, 1
    WORD $0x3948; BYTE $0xf0     // cmp    rax, rsi
	JBE LBB0_9
LBB0_5:
    WORD $0x8948; BYTE $0xf2     // mov    rdx, rsi
    LONG $0xd7af0f48             // imul    rdx, rdi
    LONG $0x107ac1c4; WORD $0x9024 // vmovss    xmm4, dword [r8 + 4*rdx]
    LONG $0x107ac1c4; WORD $0x905c; BYTE $0x04 // vmovss    xmm3, dword [r8 + 4*rdx + 4]
    LONG $0x107ac1c4; WORD $0x9054; BYTE $0x08 // vmovss    xmm2, dword [r8 + 4*rdx + 8]
    LONG $0xec5fe2c5             // vmaxss    xmm5, xmm3, xmm4
    LONG $0xf55feac5             // vmaxss    xmm6, xmm2, xmm5
    LONG $0xee5acac5             // vcvtss2sd    xmm5, xmm6, xmm6
    LONG $0xe82ef9c5             // vucomisd    xmm5, xmm0
	JAE LBB0_7
    WORD $0xe6c1; BYTE $0x02     // shl    esi, 2
    WORD $0x8944; BYTE $0xda     // mov    edx, r11d
    LONG $0x001104c6             // mov    byte [rcx + rdx], 0
    LONG $0x01538d41             // lea    edx, [r11 + 1]
    LONG $0x001104c6             // mov    byte [rcx + rdx], 0
    LONG $0x02538d41             // lea    edx, [r11 + 2]
    LONG $0x001104c6             // mov    byte [rcx + rdx], 0
    WORD $0x3145; BYTE $0xd2     // xor    r10d, r10d
	JMP LBB0_8
